# .github/workflows/deploy.yml
name: Deploy

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION }}
  GOOGLE_DEFAULT_CALENDAR_ID: ${{ vars.GOOGLE_DEFAULT_CALENDAR_ID }}
  GOOGLE_APPSHEET_APP_ID: ${{ vars.GOOGLE_APPSHEET_APP_ID }}
  GCP_GOOGLE_CALENDAR_SERVICE_ACCOUNT_EMAIL: ${{ vars.GCP_GOOGLE_CALENDAR_SERVICE_ACCOUNT_EMAIL }}
  HEADER_SOURCE_TO_PASS: ${{ vars.HEADER_SOURCE_TO_PASS }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  GOOGLE_APPSHEET_ACCESS_KEY: ${{ secrets.GOOGLE_APPSHEET_ACCESS_KEY }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
  TF_VAR_GOOGLE_APPSHEET_APP_ID: ${{ vars.GOOGLE_APPSHEET_APP_ID }}
  TF_VAR_GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  TF_VAR_GCP_REGION: ${{ vars.GCP_REGION }}
  TF_VAR_GOOGLE_DEFAULT_CALENDAR_ID: ${{ vars.GOOGLE_DEFAULT_CALENDAR_ID }}
  TF_VAR_HEADER_SOURCE_TO_PASS: ${{ vars.HEADER_SOURCE_TO_PASS }}
  TF_VAR_GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  TF_VAR_GOOGLE_APPSHEET_ACCESS_KEY: ${{ secrets.GOOGLE_APPSHEET_ACCESS_KEY }}
  TF_VAR_TF_STATE_BUCKET: gs://${{ vars.GCP_PROJECT_ID }}-tfstate

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name : Authenticate with Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
       version: 'latest'
       project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Install Terraform, Zip
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt-get update && sudo apt-get install -y terraform gnupg software-properties-common zip

    - name: Prepare Function Source
      run: |
        zip -r functions/function-source.zip functions/.
        ls -l functions/function-source.zip || echo File not found!
    
    - name: Create/use TF State bucket, create TF backend config
      run: |
        
        gcloud auth activate-service-account --key-file=${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        gcloud storage buckets list | grep ${{ env.TF_VAR_TF_STATE_BUCKET }} || gcloud storage buckets create ${{ env.TF_VAR_TF_STATE_BUCKET }} --location=${{ env.GCP_REGION }}
        gcloud storage buckets describe ${{ env.TF_VAR_TF_STATE_BUCKET }} | grep "versioning_enabled: true" || gcloud storage buckets update ${{ env.TF_VAR_TF_STATE_BUCKET }} --versioning
        echo "terraform {" > terraform/backend.tf
        echo "   backend \"gcs\" {" >> terraform/backend.tf
        echo "      bucket = \"${{ env.TF_VAR_TF_STATE_BUCKET }}\"" >> terraform/backend.tf
        echo "   }" >> terraform/backend.tf
        echo "}" >> terraform/backend.tf
        cat terraform/backend.tf || echo file not created!

    - name: Terraform Init
      run: terraform init -reconfigure
      working-directory: terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: terraform


